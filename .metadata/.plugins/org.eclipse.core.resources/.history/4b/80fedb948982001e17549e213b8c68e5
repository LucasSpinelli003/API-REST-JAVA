package br.com.fiap.solutech.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.fiap.solutech.exception.IdNotFoundException;
import br.com.fiap.solutech.model.EnderecoChamado;
import br.com.fiap.solutech.model.Segurado;
import br.com.fiap.solutech.model.Veiculo;

public class VeiculoDao {

	private Connection conn;

	public VeiculoDao(Connection conn) {
		super();
		this.conn = conn;
	}

	public List<Veiculo> pesquisarPorNome(String nome) throws SQLException {
		// Criar o objeto com o comando SQL
		PreparedStatement stm = conn.prepareStatement("select * from t_sip_info_veiculo where modelo like ?");
		// Setar o parametro no comando SQL
		stm.setString(1, "%" + nome + "%");
		// Executar o comando SQL
		ResultSet result = stm.executeQuery();
		// Criar a lista de produtos
		List<Veiculo> lista = new ArrayList<>();
		// Recuperar os produtos encontrados e adicionar na lista
		while (result.next()) {
			Veiculo veiculo = parse(result);
			lista.add(veiculo);
		}
		// Retornar a lista
		return lista;
	}

	public List<Veiculo> listar() throws ClassNotFoundException, SQLException {

		PreparedStatement stm = conn.prepareStatement("select * from t_sip_info_veiculo");

		ResultSet result = stm.executeQuery();

		List<Veiculo> lista = new ArrayList<Veiculo>();

		while (result.next()) {
			Veiculo veiculo = parse(result);
			lista.add(veiculo);
		}
		return lista;
	}

	private Veiculo parse(ResultSet result) throws SQLException {
		int id = result.getInt("id_info_veiculo");
		String modelo = result.getString("modelo");
		double peso = result.getDouble("peso");
		double altura = result.getDouble("altura");
		double comprimento = result.getDouble("comprimento");
		double largura = result.getDouble("largura");
		int eixos = result.getInt("qtd_eixos");
		String tipoCarroceria = result.getString("tipo_carroceria");
		int pesoCarga = result.getInt("peso_carga");
		String alteracoes = result.getString("alteracoes");

		Veiculo veiculo = new Veiculo(id, modelo, peso, altura, comprimento, largura, eixos, tipoCarroceria, pesoCarga,
				alteracoes);

		return veiculo;
	}

	public void cadastrar(Veiculo veiculo) throws ClassNotFoundException, SQLException {
		
		PreparedStatement stmm = conn.prepareStatement("select * from t_sip_info_veiculo");

		ResultSet resultGet = stmm.executeQuery();

		List<Veiculo> lista = new ArrayList<Veiculo>();

		while (resultGet.next()) {
			Veiculo veiculoGet = parse(resultGet);
			lista.add(veiculoGet);
		}
		
		int id = lista.size() + 1;

		// Criar o objeto com o comando SQL configuravel
		PreparedStatement stm = conn.prepareStatement("INSERT INTO"
				+ " T_SIP_INFO_VEICULO (id_info_veiculo, modelo, peso, altura, comprimento, largura, qtd_eixos, tipo_carroceria, peso_carga,alteracoes) "
				+ "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

		// Setar os valores no comando SQL
		stm.setInt(1, id);
		stm.setString(2, veiculo.getModelo());
		stm.setDouble(3, veiculo.getPeso());
		stm.setDouble(4, veiculo.getAltura());
		stm.setDouble(5, veiculo.getComprimento());
		stm.setDouble(6, veiculo.getLargura());
		stm.setDouble(7, veiculo.getEixos());
		stm.setString(8, veiculo.getTipoCarroceria());
		stm.setDouble(9, veiculo.getPesoCarga());
		stm.setString(10, veiculo.getAlteracoes());

		// Executar o comando SQL
		stm.executeUpdate();
	}

	public void atualizar(Veiculo veiculo) throws ClassNotFoundException, SQLException, IdNotFoundException {

		// PreparedStatement
		PreparedStatement stm = conn.prepareStatement(
				"update t_sip_info_veiculo set modelo = ?, peso = ?, altura = ?, comprimento = ?, largura = ?, qtd_eixos = ?, tipo_carroceria = ?, peso_carga = ?, alteracoes = ? where id_info_veiculo = ?");
		// Setar os parametros na Query
		if (veiculo.getModelo() != null) {
			stm.setString(1, veiculo.getModelo());
			stm.setDouble(2, veiculo.getPeso());
			stm.setDouble(3, veiculo.getAltura());
			stm.setDouble(4, veiculo.getComprimento());
			stm.setDouble(5, veiculo.getLargura());
			stm.setDouble(6, veiculo.getEixos());
			stm.setString(7, veiculo.getTipoCarroceria());
			stm.setDouble(8, veiculo.getPesoCarga());
			stm.setString(9, veiculo.getAlteracoes());
			stm.setInt(10, veiculo.getId());
			// Executar a Query
			int linha = stm.executeUpdate();
			if (linha == 0) {
				throw new IdNotFoundException("Veiculo não encontrado para atualizar");
			}
		}
	}

	public Veiculo pesquisar(int id) throws ClassNotFoundException, SQLException, IdNotFoundException {

		// PreparedStatement (com select)
		PreparedStatement stm = conn
				.prepareStatement("select * from" + " t_sip_info_veiculo where id_info_veiculo = ?");

		// Setar o id no comando sql (select)
		stm.setInt(1, id);

		// Executar o comando SQL
		ResultSet result = stm.executeQuery();

		// Verifica se encontrou o produto
		if (!result.next()) {
			// Lança uma exception pois o produto não foi encontrado
			throw new IdNotFoundException("Veiculo não encontrado");
		}
		Veiculo veiculo = parse(result);
		// Retornar o produto
		return veiculo;
	}

	public void remover(int id) throws ClassNotFoundException, SQLException, IdNotFoundException {

		// PreparedStatement
		PreparedStatement stm = conn.prepareStatement("delete from t_sip_info_veiculo where id_info_veiculo = ?");
		// Setar os parametros na Query
		stm.setInt(1, id);
		// Executar a Query
		int linha = stm.executeUpdate();
		if (linha == 0)
			throw new IdNotFoundException("Veiculo não encontrado para remoção");
	}

}
