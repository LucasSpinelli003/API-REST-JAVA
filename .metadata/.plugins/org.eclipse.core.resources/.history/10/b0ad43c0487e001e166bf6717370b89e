package br.com.fiap.banco.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import br.com.fiap.banco.exception.IdNotFoundException;
import br.com.fiap.banco.model.Categoria;
import br.com.fiap.banco.model.Chamado;
import br.com.fiap.banco.model.ContatoSegurado;
import br.com.fiap.banco.model.EnderecoChamado;
import br.com.fiap.banco.model.EnderecoSegurado;
import br.com.fiap.banco.model.Produto;
import br.com.fiap.banco.model.Segurado;
import br.com.fiap.banco.model.Veiculo;

public class ChamadoDao {

	private Connection conn;
	
	public ChamadoDao() {}
	
	public ChamadoDao(Connection conn) {
		this.conn = conn;
	}
	
	public List<Chamado> listar() throws ClassNotFoundException, SQLException {

		PreparedStatement stm = conn.prepareStatement("select * from t_sip_chamado");

		ResultSet result = stm.executeQuery();

		List<Chamado> lista = new ArrayList<Chamado>();

		while (result.next()) {
			Chamado chamado = parse(result);
			lista.add(chamado);
		}
		return lista;
	}
	
	private Chamado parse(ResultSet result) throws SQLException {
		int id = result.getInt("id_chamado");
		int idSegurado = result.getInt("id_segurado");
		int idEnderecoSegurado = result.getInt("id_endereco_segurado");
		int idContatoSegurado = result.getInt("id_contato_segurado");
		int idInfoVeiculo = result.getInt("id_info_veiculo");
		int idEnderecoChamado = result.getInt("id_endereco_chamado");
		String descricao = result.getString("descricao");
		LocalDateTime dataCadastro = result.getObject("data_chamado", LocalDateTime.class);
		
		Chamado chamado = new Chamado(id,descricao,dataCadastro);
		
		if (idSegurado != 0) {
			Segurado segurado = new Segurado();
			segurado.setId(idSegurado);
			chamado.setSegurado(segurado);
		}
		if (idEnderecoSegurado != 0) {
			EnderecoSegurado enderecoSegurado = new EnderecoSegurado();
			enderecoSegurado.setId(idEnderecoSegurado);
			chamado.setEnderecoSegurado(enderecoSegurado);
		}
		if (idContatoSegurado != 0) {
			Segurado segurado = new Segurado();
			ContatoSegurado contatoSegurado = new ContatoSegurado();
			segurado.setIdContato(idContatoSegurado);
			chamado.setIdContatoSegurado(idContatoSegurado);
			contatoSegurado.setId(idContatoSegurado);
		}
		if (idInfoVeiculo != 0) {
			Veiculo veiculo = new Veiculo();
			veiculo.setId(idInfoVeiculo);
			chamado.setIdInfoVeiculo(idInfoVeiculo);
		}
		if (idEnderecoChamado != 0) {
			EnderecoChamado enderecoChamado = new EnderecoChamado();
			enderecoChamado.setId(idEnderecoChamado);
			chamado.setIdEnderecoChamado(idEnderecoChamado);
		}
		
		return chamado;
	}
	
	public void cadastrar(Chamado chamado) throws ClassNotFoundException, SQLException {

		// Criar o objeto com o comando SQL configuravel
		PreparedStatement stm = conn.prepareStatement("INSERT INTO" + " T_SIP_CHAMADO (id_chamado, id_segurado, id_endereco_segurado,"
				+ " , id_contato_segurado, id_info_veiculo, id_endereco_chamado,descricao, data_chamado) "
				+ "values (?, ?, ?, ?, ?, ?, ?, ?)");

		// Setar os valores no comando SQL
		stm.setInt(1, chamado.getId());
		stm.setInt(2, chamado.getSegurado().getId());
		stm.setInt(3, chamado.getEnderecoSegurado().getId());
		stm.setInt(4, chamado.getContatoSegurado().getId());
		stm.setInt(5, chamado.getVeiculo().getId());
		stm.setInt(6, chamado.getEnderecoChamado().getId());
		stm.setString(7, chamado.getDescricao());
		stm.setObject(8, chamado.getDataCadastro());
		// Executar o comando SQL
		stm.executeUpdate();
	}
	public Chamado pesquisar(int id) throws ClassNotFoundException, SQLException, IdNotFoundException {

		// PreparedStatement (com select)
		PreparedStatement stm = conn.prepareStatement("select * from" + " t_sip_chamado where id_chamado = ?");

		// Setar o id no comando sql (select)
		stm.setInt(1, id);

		// Executar o comando SQL
		ResultSet result = stm.executeQuery();

		// Verifica se encontrou o produto
		if (!result.next()) {
			// Lança uma exception pois o produto não foi encontrado
			throw new IdNotFoundException("Chamado não encontrado");
		}
		Chamado chamado = parse(result);
		// Retornar o produto
		return chamado;
	}
	
	public void atualizar(Chamado chamado) throws ClassNotFoundException, SQLException, IdNotFoundException {

		// PreparedStatement
		PreparedStatement stm = conn.prepareStatement("update t_sip_chamado set descricao = ? where id_chamado = ?");
		// Setar os parametros na Query
		stm.setString(1, chamado.getDescricao());
		// Executar a Query
		int linha = stm.executeUpdate();
		if (linha == 0)
			throw new IdNotFoundException("Chamado não encontrado para atualizar");
	}
	
	public void remover(int id) throws ClassNotFoundException, SQLException, IdNotFoundException {
		
		// PreparedStatement
		PreparedStatement stm = conn.prepareStatement("delete from t_sip_chamado where id_chamado = ?");
		// Setar os parametros na Query
		stm.setInt(1, id);
		// Executar a Query
		int linha = stm.executeUpdate();
		if (linha == 0)
			throw new IdNotFoundException("Produto não encontrado para remoção");
	}
	
}
