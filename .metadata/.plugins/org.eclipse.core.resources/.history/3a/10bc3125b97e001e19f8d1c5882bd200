	package br.com.fiap.solutech.dao;
	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.util.ArrayList;
	import java.util.List;
	import br.com.fiap.banco.exception.IdNotFoundException;
import br.com.fiap.solutech.model.EnderecoChamado;
	
	
	public class EnderecoChamadoDao {
	
		private Connection conn;
	
		public EnderecoChamadoDao(Connection conn) {
			super();
			this.conn = conn;
		}
		
		public List<EnderecoChamado> pesquisarPorNome(String nome) throws SQLException{
			//Criar o objeto com o comando SQL
			PreparedStatement stm = conn.prepareStatement("select * from t_sip_endereco_chamado where logradouro like ?");
			//Setar o parametro no comando SQL
			stm.setString(1, "%"+nome+"%");
			//Executar o comando SQL
			ResultSet result = stm.executeQuery();
			//Criar a lista de produtos
			List<EnderecoChamado> lista = new ArrayList<>();
			//Recuperar os produtos encontrados e adicionar na lista
			while (result.next()) {
				EnderecoChamado enderecoChamado = parse(result);
				lista.add(enderecoChamado);
			}
			//Retornar a lista
			return lista;
		}
		
		public List<EnderecoChamado> listar() throws ClassNotFoundException, SQLException {
	
			PreparedStatement stm = conn.prepareStatement("select * from t_sip_endereco_chamado");
	
			ResultSet result = stm.executeQuery();
	
			List<EnderecoChamado> lista = new ArrayList<EnderecoChamado>();
	
			while (result.next()) {
				EnderecoChamado enderecoChamado = parse(result);
				lista.add(enderecoChamado);
			}
			return lista;
		}
		
		private EnderecoChamado parse(ResultSet result) throws SQLException {
			int id = result.getInt("id_endereco_chamado");
			String idEnderecoSegurado = result.getString("logradouro");
			String idContatoSegurado = result.getString("ponto_referencia");
		
			
			EnderecoChamado enderecoChamado = new EnderecoChamado(id, idEnderecoSegurado, idContatoSegurado);
	
			return enderecoChamado;
		}
		
		public void cadastrar(EnderecoChamado enderecoChamado) throws ClassNotFoundException, SQLException {
	
			// Criar o objeto com o comando SQL configuravel
			PreparedStatement stm = conn.prepareStatement(
					"INSERT INTO" + " T_SIP_ENDERECO_CHAMADO (id_endereco_chamado, logradouro, ponto_referencia) " + "values (?, ?, ?)");
	
			// Setar os valores no comando SQL
			stm.setInt(1, enderecoChamado.getId());
			stm.setString(2, enderecoChamado.getLogradouro());
			stm.setString(3, enderecoChamado.getPontoReferencia());
			
			// Executar o comando SQL
			stm.executeUpdate();
		}
		
		public EnderecoChamado pesquisar(int id) throws ClassNotFoundException, SQLException, IdNotFoundException {
	
			// PreparedStatement (com select)
			PreparedStatement stm = conn.prepareStatement("select * from" + " t_sip_endereco_chamado where id_endereco_chamado = ?");
	
			// Setar o id no comando sql (select)
			stm.setInt(1, id);
	
			// Executar o comando SQL
			ResultSet result = stm.executeQuery();
	
			// Verifica se encontrou o produto
			if (!result.next()) {
				// Lança uma exception pois o produto não foi encontrado
				throw new IdNotFoundException("Endereço do chamado não encontrado");
			}
			EnderecoChamado enderecoChamado = parse(result);
			// Retornar o produto
			return enderecoChamado;
		}
		
		public void atualizar(EnderecoChamado enderecoChamado) throws ClassNotFoundException, SQLException, IdNotFoundException {
	
			// PreparedStatement
			PreparedStatement stm = conn
					.prepareStatement("update t_sip_endereco_chamado set logradouro = ?, ponto_referencia = ? where id_endereco_chamado = ?");
			// Setar os parametros na Query
			stm.setString(1, enderecoChamado.getLogradouro());
			stm.setString(2, enderecoChamado.getPontoReferencia());
			stm.setInt(3, enderecoChamado.getId());
			// Executar a Query
			int linha = stm.executeUpdate();
			if (linha == 0)
				throw new IdNotFoundException("Endereço do chamado não encontrado para atualizar");
		}
		
		public void remover(int id) throws ClassNotFoundException, SQLException, IdNotFoundException {
	
			// PreparedStatement
			PreparedStatement stm = conn.prepareStatement("delete from t_sip_endereco_chamado where id_endereco_chamado = ?");
			// Setar os parametros na Query
			stm.setInt(1, id);
			// Executar a Query
			int linha = stm.executeUpdate();
			if (linha == 0)
				throw new IdNotFoundException("Endereço do chamado não encontrado para remoção");
		}
	
		
		
	}
